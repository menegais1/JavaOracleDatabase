package DatabaseAccess.Utils;

import DatabaseAccess.Annotations.AutoGenerated;
import DatabaseAccess.Domain.Base.BaseController;
import DatabaseAccess.Domain.Base.Entity;
import javafx.collections.FXCollections;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

public class ViewBuilder {


    public static void inflateTableView(BaseController controller, Stage primaryStage, BorderPane pane) {

        TableView<Entity> table = new TableView<>();
        System.out.println(controller.getModel().getClass());
        List tableColumns = new ArrayList<>();
        List<String> prettyNames = controller.getModel().getPrettyNames();
        List<String> fieldNames = controller.getModel().getFieldNames(controller.getModel().getClass(), null);
        for (int i = 0; i < fieldNames.size(); i++) {
            TableColumn<Entity, String> tableColumn = new TableColumn(prettyNames.get(i));
            tableColumn.setCellValueFactory(new PropertyValueFactory<>(fieldNames.get(i)));
            tableColumns.add(tableColumn);
        }
        TableColumn<Entity, Button> removeButton = new TableColumn<>("Remove");
        removeButton.setCellFactory(ActionButtonTableCell.<Entity>forTableColumn("Remove", entity -> {
            if (controller.delete(entity) > 0) {
                table.setItems(FXCollections.observableArrayList(controller.getAll()));
            }
            return entity;
        }));

        TableColumn<Entity, Button> updateButton = new TableColumn<>("Update");
        updateButton.setCellFactory(ActionButtonTableCell.<Entity>forTableColumn("Update", entity -> {
            initUpdateModalWindow(entity, controller, "Update", primaryStage, pane);
            return entity;
        }));

        table.getColumns().addAll(tableColumns);
        table.getColumns().add(updateButton);
        table.getColumns().add(removeButton);
        table.setItems(FXCollections.observableArrayList(controller.getAll()));
        pane.setCenter(table);
    }

    public static void initUpdateModalWindow(Entity e, BaseController controller, String title, Stage primaryStage, BorderPane pane) {
        Stage modal = new Stage();
        ScrollPane scrollPane = new ScrollPane();
        VBox vBox = new VBox();
        List<TextField> textFields = new ArrayList<>();

        List<String> fields = e.getFieldNames(e.getClass(), null);
        List<Tuple<Type, Object>> data = controller.getModel().getData(fields, e);

        for (int i = 0; i < fields.size(); i++) {
            String field = fields.get(i);
            HBox hBox = new HBox();
            Label label = new Label(field);
            TextField textField = new TextField(data.get(i).y.toString());
            textFields.add(textField);
            hBox.getChildren().addAll(label, textField);
            vBox.getChildren().add(hBox);
        }


        scrollPane.setContent(vBox);

        Button insertButton = new Button("Save");
        insertButton.setOnAction(event -> {
            List<String> values = new ArrayList<>();
            for (int i = 0; i < textFields.size(); i++) {
                values.add(textFields.get(i).getText());
            }
            if (controller.update(e, fields, values) > 0) {
                inflateTableView(controller, primaryStage, pane);
            }

            modal.close();
        });

        Button cancelButton = new Button("Cancelar");
        cancelButton.setOnAction(event -> modal.close());
        HBox hbox = new HBox();
        hbox.getChildren().addAll(insertButton, cancelButton);
        vBox.getChildren().add(hbox);
        modal.setTitle(title);
        modal.setScene(new Scene(scrollPane, 800, 600));
        modal.initModality(Modality.APPLICATION_MODAL);
        modal.show();

    }


    public static void initInsertModalWindow(BaseController controller, String title, Stage primaryStage, BorderPane pane) {

        Stage modal = new Stage();
        ScrollPane scrollPane = new ScrollPane();
        VBox vBox = new VBox();
        List<TextField> textFields = new ArrayList<>();

        List<String> fields = controller.getModel().getFieldNames(controller.getModel().getClass(), List.of(AutoGenerated.class));

        for (int i = 0; i < fields.size(); i++) {
            String field = fields.get(i);
            HBox hBox = new HBox();
            Label label = new Label(field);
            TextField textField = new TextField();
            textFields.add(textField);
            hBox.getChildren().addAll(label, textField);
            vBox.getChildren().add(hBox);
        }

        Button insertButton = new Button("Save");
        insertButton.setOnAction(event -> {
            List<String> values = new ArrayList<>();
            for (int i = 0; i < textFields.size(); i++) {
                values.add(textFields.get(i).getText());
            }
            if (controller.insert(fields, values) > 0) {
                inflateTableView(controller, primaryStage, pane);
            }

            modal.close();
        });

        Button cancelButton = new Button("Cancelar");
        cancelButton.setOnAction(event -> modal.close());
        HBox hbox = new HBox();
        hbox.getChildren().addAll(insertButton, cancelButton);
        vBox.getChildren().add(hbox);
        scrollPane.setContent(vBox);
        modal.setTitle(title);
        modal.setScene(new Scene(scrollPane, 800, 600));
        modal.initModality(Modality.APPLICATION_MODAL);
        modal.show();
    }
}
